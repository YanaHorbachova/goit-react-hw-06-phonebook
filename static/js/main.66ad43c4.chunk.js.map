{"version":3,"sources":["redux/phonebook/phonebook-actions.js","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["actions","addContact","createAction","name","number","payload","id","shortId","generate","deleteContact","filter","connect","state","value","contacts","dispatch","onChange","e","phonebookActions","target","type","className","ContactForm","nameInputId","phoneInputId","handleNameChange","event","setState","currentTarget","handlePhoneChange","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","Component","ContactListItem","onDeleteContact","onClick","getFilteredContacts","allContacts","normalizedFilter","toLowerCase","contact","includes","items","contactId","map","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","phonebookReducer","store","configureStore","reducer","devTools","process","storeFunc","persistor","persistStore","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.66ad43c4.chunk.js","sourcesContent":["import shortId from \"shortid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"contacts/Add\", ({ name, number }) => ({\n  payload: {\n    id: shortId.generate(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction(\"contacts/Delete\");\nconst filter = createAction(\"contacts/Filter\");\n\nconst actions = { addContact, deleteContact, filter };\n\nexport default actions;\n\n// / WITHOUT REDUX TOOLKIT\n\n// import shortId from 'shortid';\n// import actionTypes from './phonebook-types'\n\n// const addContact = ({name, number}) => (\n//     {\n//         type: actionTypes.ADD,\n//         payload: {\n//              id: shortId.generate(),\n//              name,\n//              number\n//         }\n//     }\n// )\n\n// const deleteContact = (contactId) => (\n//     {\n//   type: actionTypes.DELETE,\n//   payload: contactId,\n//   })\n\n//   const filter = (value) => ({\n//     type: actionTypes.FILTER,\n//     payload: value,\n//   });\n\n// export default { addContact, deleteContact, filter };\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebook-actions\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      className=\"input\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    ></input>\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(phonebookActions.filter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebook-actions\";\nimport shortId from \"shortid\";\nimport \"./ContactForm.css\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortId.generate();\n  phoneInputId = shortId.generate();\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handlePhoneChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\n          <span className=\"form-label-title\">Name</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            id={this.nameInputId}\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            name=\"name\"\n          />\n        </label>\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\n          <span className=\"form-label-title\">Number</span>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            id={this.phoneInputId}\n            value={this.state.number}\n            name=\"number\"\n            onChange={this.handlePhoneChange}\n          />\n          <button className=\"form-button button\" type=\"submit\">\n            Add contact\n          </button>\n        </label>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(phonebookActions.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from \"prop-types\";\n\nimport \"./ContactList.css\";\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\n  <li className=\"contact-list-item\">\n    <span className=\"contact-list-name\">{name} </span>\n    <span className=\"contact-list-number\">{number} </span>\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onDeleteContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { connect } from \"react-redux\";\nimport phonebookActions from \"../../redux/phonebook/phonebook-actions\";\n\nimport ContactListItem from \"./ContactListItem\";\n\nimport \"./ContactList.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contact-list\">\n    {contacts.map((contact) => (\n      <ContactListItem\n        id={contact.id}\n        key={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst getFilteredContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getFilteredContacts(items, filter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookActions.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport \"./styles.css\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"phonebook\">\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n// import actionTypes from \"./phonebook-types\";\nimport actions from \"./phonebook-actions\";\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [actions.filter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n///WITHOUT REDUX TOOLKIT\n// import {combineReducers} from 'redux';\n// import actionTypes from './phonebook-types'\n\n// const items=(state=[], {type, payload}) => {\n//   switch(type) {\n// case actionTypes.ADD:\n//   return [...state, payload];\n\n//     case actionTypes.DELETE:\n//   return state.filter(contact => contact.id !== payload);\n\n//     default:\n//     return state;\n\n//   }\n\n// }\n\n// const filter = (state = '', {type, payload}) => {\n//     switch (type) {\n//       case actionTypes.FILTER:\n//         return payload;\n\n//       default:\n//         return state;\n//     }\n// };\n\n// export default combineReducers({\n//     items,\n//     filter\n// })\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst rootReducer = combineReducers({\n  contacts: persistReducer(contactsPersistConfig, phonebookReducer),\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nconst storeFunc = { store, persistor };\n\nexport default storeFunc;\n\n//// WITHOUT REDUX TOOLKIT\n// import { createStore, combineReducers } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import phonebookReducer from \"./phonebook/phonebook-reducer\";\n\n// const rootReducer = combineReducers({\n//   phonebook: phonebookReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport storeFunc from \"./redux/store\";\n\nconsole.log(storeFunc);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={storeFunc.store}>\n      <PersistGate loading={null} persistor={storeFunc.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}